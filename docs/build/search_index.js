var documenterSearchIndex = {"docs":
[{"location":"#PinnZoo.jl-Documentation","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"","category":"page"},{"location":"#Conventions","page":"PinnZoo.jl Documentation","title":"Conventions","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"Quaternions use [q_w q_x q_y q_z] order and represent body to world rotations, using Hamilton's convention i^2 = j^2 = k^2 = -1\nFloating base joints use [x y z q_w q_x q_y q_z]$ order where the position is in the world frame\nLinear and angular velocities corresponding to a floating base joint are in the body frame","category":"page"},{"location":"#Inputs/Variables","page":"PinnZoo.jl Documentation","title":"Inputs/Variables","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"nq rightarrow # of configuration variables (1 per revolute/prismatic joint, 7 for floating joint)\nnv rightarrow # of velocity variables. Also the number of degrees of freedom (1 per revolute/prismatic joint, 6 for floating joint)\nnx rightarrow # of states, nq + nv\nnc rightarrow # of points on the robot that kinematics were generated for\nq rightarrow configuration vector, size nq.\nx rightarrow state vector, size nx. The first nq elements are the configuration and the last nv elements are velocity.\nx_dot rightarrow state vector derivative, size nx. The first nq elements are the derivative of the configuration with respect to time, and the last nv are the acceleration (derivative of velocity). \ntau rightarrow generalized force vector, size nv. Represents forces/torques at each degree of freedom.","category":"page"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"For the dynamics, we assume the following manipulator equation and velocity kinematics:","category":"page"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"M(x)dotv + C(x) = tau","category":"page"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"dotq = E(q)v","category":"page"},{"location":"#Velocity-Kinematics","page":"PinnZoo.jl Documentation","title":"Velocity Kinematics","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"E(q) is typically the identity except in the following cases (not an exhaustive list):","category":"page"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"When the configuration includes a quaternion, E(q) includes the mapping from angular velocity into a quaternion time derivative, respecting dotqq = 0, the unit norm constraint at the velocity level. Because angular velocities are related to axis-angles, there is a factor of 2 that shows up, so the mapping back from v to dotq which we refer to as E_T is not equal to E^T.","category":"page"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"When the translation velocity of a floating is in the body frame, but the position is in the world frame, so E(q) includes a body-to-world rotation matrix.","category":"page"},{"location":"#Index","page":"PinnZoo.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"","category":"page"},{"location":"#Order-Conversion-Functions","page":"PinnZoo.jl Documentation","title":"Order Conversion Functions","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"The functions below can be used as helpers to convert between different vector orders to help interfacing with different dynamics packages. For example, to use a configuration vector from this package in mujoco, you can do","category":"page"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"q_mujoco = change_order(model, q_pinnzo, :nominal, :mujoco)","category":"page"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"StateOrder\nConversionIndices\nchange_order!\nchange_order\nchange_orders!\nchange_orders\ngenerate_conversions","category":"page"},{"location":"#PinnZoo.StateOrder","page":"PinnZoo.jl Documentation","title":"PinnZoo.StateOrder","text":"StateOrder(config_names, vel_names, torque_names = vel_names[6 + 1:end])\n\nStruct containing the orders of the configuration, velocity and torque vectors. Can be used to help convert between different vector orderings\n\n\n\n\n\n","category":"type"},{"location":"#PinnZoo.ConversionIndices","page":"PinnZoo.jl Documentation","title":"PinnZoo.ConversionIndices","text":"ConversionIndices\n\nHolds index vectors mapping model vectors from one form to another, for config, velocity, state, error_state, and torques.\n\n\n\n\n\n","category":"type"},{"location":"#PinnZoo.change_order!","page":"PinnZoo.jl Documentation","title":"PinnZoo.change_order!","text":"change_order!(model::PinnZooModel, input::AbstractVector, from::Symbol, to::Symbol)\n\nGets the relevant ConversionIndices from model.conversions[(from, to)] and converts the input vector order in-place, deducing which conversion to apply (config, velocity, state, error_state, or torque) based on the input vector size.\n\n\n\n\n\nchange_order!(model::PinnZooModel, input::AbstractVector, from::Symbol, to::Symbol; dims= (1, 2))\n\nGets the relevant ConversionIndices from model.conversions[(from, to)] and converts the input matrix order in-place, deducing which conversion to apply (config, velocity, state, error_state, or torque) based on the input matrix rows and columns. Default is to transform both input and output, but the dimensions can be specified using the dims option. \n\n\n\n\n\nchange_order!(model::PinnZooModel, input::Adjoint, from::Symbol, to::Symbol)\n\nGets the relevant ConversionIndices from model.conversions[(from, to)] and converts the input vector order in-place, deducing which conversion to apply (config, velocity, state, error_state, or torque) based on the input vector size.\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.change_order","page":"PinnZoo.jl Documentation","title":"PinnZoo.change_order","text":"change_order(model::PinnZooModel, input::AbstractVector, from, to)\n\nGets the relevant ConversionIndices from model.conversions[(from, to)] and converts the input vector order, deducing which conversion to apply (config, velocity, state, error_state, or torque) based on the input vector size.\n\n\n\n\n\nchange_order(model::PinnZooModel, input::AbstractMatrix, from::Symbol, to::Symbol)\n\nGets the relevant ConversionIndices from model.conversions[(from, to)] and converts the input matrix order in-place, deducing which conversion to apply (config, velocity, state, error_state, or torque) based on the input matrix rows and columns. Default is to transform both input and output, but the dimensions can be specified using the dims option. \n\n\n\n\n\nchange_order!(model::PinnZooModel, input::Adjoint, from::Symbol, to::Symbol)\n\nGets the relevant ConversionIndices from model.conversions[(from, to)] and converts the input vector order, deducing which conversion to apply (config, velocity, state, error_state, or torque) based on the input vector size.\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.change_orders!","page":"PinnZoo.jl Documentation","title":"PinnZoo.change_orders!","text":"change_orders!(model::PinnZooModel, inputs::Vector{<:AbstractArray}, from, to; dims = (1, 2))\n\nChanges ordering in-place according to the appropriate convention for each object in inputs    \n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.change_orders","page":"PinnZoo.jl Documentation","title":"PinnZoo.change_orders","text":"change_orders!(model::PinnZooModel, inputs::Vector{<:AbstractArray}, from, to; dims = (1, 2))\n\nChanges ordering according to the appropriate convention for each object in inputs    \n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.generate_conversions","page":"PinnZoo.jl Documentation","title":"PinnZoo.generate_conversions","text":"generate_conversions(orders::Dict{Symbol, StateOrder}, \n        conversions::Dict{Tuple{Symbol, Symbol}, ConversionIndices}=Dict{Tuple{Symbol, Symbol}, ConversionIndices}();\n        from_scratch = false)\n\nGiven the vector orders specified, creates ConversionIndices objects that can be used with change_orders to convert between each order in orders (i.e. nominal, Pinocchio, MuJoCo)\n\n\n\n\n\n","category":"function"},{"location":"#Dynamics-Functions","page":"PinnZoo.jl Documentation","title":"Dynamics Functions","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"M_func\nC_func\nforward_dynamics\nforward_dynamics_deriv\ninverse_dynamics\ninverse_dynamics_deriv","category":"page"},{"location":"#PinnZoo.M_func","page":"PinnZoo.jl Documentation","title":"PinnZoo.M_func","text":"M_func(model::PinnZooModel, x::Vector{Float64})\n\nReturn the mass matrix of the model as a function of the configuration (x[1:model.nq])\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.C_func","page":"PinnZoo.jl Documentation","title":"PinnZoo.C_func","text":"C_func(model::PinnZooModel, x::Vector{Float64})\n\nReturn the dynamics bias of the model (coriolos + centrifugal + gravitational forces)\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.forward_dynamics","page":"PinnZoo.jl Documentation","title":"PinnZoo.forward_dynamics","text":"forward_dynamics(model::PinnZooModel, x::Vector{Float64}, τ::Vector{Float64})\n\nReturn the forward dynamics v̇ = M(x) \\ (τ - C) where M is the mass matrix and C is the dynamics bias vector.\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.forward_dynamics_deriv","page":"PinnZoo.jl Documentation","title":"PinnZoo.forward_dynamics_deriv","text":"forward_dynamics_deriv(model::PinnZooModel, x::Vector{Float64}, τ::Vector{Float64})\n\nReturn a tuple of derivatives of the forward dynamics (v̇) with respect to x and τ\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.inverse_dynamics","page":"PinnZoo.jl Documentation","title":"PinnZoo.inverse_dynamics","text":"inverse_dynamics(model::PinnZooModel, x::Vector{Float64}, v̇::Vector{Float64})\n\nReturn the inverse dynamics τ = M⩒ + C where M is the mass matrix and C is the dynamics bias vector\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.inverse_dynamics_deriv","page":"PinnZoo.jl Documentation","title":"PinnZoo.inverse_dynamics_deriv","text":"inverse_dynamics_deriv(model::PinnZooModel, x::Vector{Float64}, v̇::Vector{Float64}\n\nReturn a tuple of derivatives of the inverse dynamics (τ) with respect to x and v̇ \n\n\n\n\n\n","category":"function"},{"location":"#Kinematics-Functions","page":"PinnZoo.jl Documentation","title":"Kinematics Functions","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"kinematics\nkinematics_jacobian\nkinematics_velocity\nkinematics_velocity_jacobian","category":"page"},{"location":"#PinnZoo.kinematics","page":"PinnZoo.jl Documentation","title":"PinnZoo.kinematics","text":"kinematics(model::PinnZooModel, x::Vector{Float64})\n\nReturn a list of the locations of each body in model.kinematics_bodies in the world frame.\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.kinematics_jacobian","page":"PinnZoo.jl Documentation","title":"PinnZoo.kinematics_jacobian","text":"kinematics_jacobian(model::PinnZooModel, x::Vector{Float64})\n\nReturn the jacobian of the kinematics function with respect to x (not projected into the tangent space).\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.kinematics_velocity","page":"PinnZoo.jl Documentation","title":"PinnZoo.kinematics_velocity","text":"kinematics_velocity(model::PinnZooModel, x::Vector{Float64})\n\nReturn a list of the instantaneous linear velocities of each body in model.kinematics_bodies in the world frame.\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.kinematics_velocity_jacobian","page":"PinnZoo.jl Documentation","title":"PinnZoo.kinematics_velocity_jacobian","text":"kinematics_velocity_jacobian(model::PinnZooModel, x::Vector{Float64})\n\nReturn the jacobian of the kinematics_velocity function with respect to x (not in the tangent space). If J_q is the derivative of the kinematics with respect to q, this jacobian J = [dotJ_q J_q] where dotJ_q = fracpartialpartial q J_qv and J_qv is equal to kinematics_velocity. This also means that Jdotx expresses the constraint at the acceleration level, i.e. dotJ_qdotq + J_qdotv = 0\n\n\n\n\n\n","category":"function"},{"location":"#Utility-Functions","page":"PinnZoo.jl Documentation","title":"Utility Functions","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"is_floating\nzero_state\nrandn_state\ninit_state","category":"page"},{"location":"#PinnZoo.is_floating","page":"PinnZoo.jl Documentation","title":"PinnZoo.is_floating","text":"is_floating(model::PinnZooModel)\n\nReturn whether the model includes a floating base joint\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.zero_state","page":"PinnZoo.jl Documentation","title":"PinnZoo.zero_state","text":"zero_state(model::PinnZooModel)\n\nReturn the neutral state of the model.\n\nwarning: Warning\nThis currently defaults to all zeros unless overridden and will be wrong if there is a quaternion in the state.\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.randn_state","page":"PinnZoo.jl Documentation","title":"PinnZoo.randn_state","text":"randn_state(model::PinnZooModel)\n\nReturn a state vector where every coordinate is drawn from a normal distribution\n\nwarning: Warning\nThis currently does not respect the unit norm constraint on quaternions unless overridden\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.init_state","page":"PinnZoo.jl Documentation","title":"PinnZoo.init_state","text":"init_state(model::Go1)\n\nReturn state vector with the robot on the ground in the starting pose\n\n\n\n\n\ninit_state(model::Go2)\n\nReturn state vector with the robot on the ground in the starting pose\n\n\n\n\n\ninit_state(model::PinnZooModel)\n\nReturn a custom initial state for the model (like standing) if defined, otherwise returns all zeros\n\nwarning: Warning\nThis currently defaults to all zeros unless overridden and will be wrong if there is a quaternion in the state.\n\n\n\n\n\n","category":"function"},{"location":"#Quaternion-functions","page":"PinnZoo.jl Documentation","title":"Quaternion functions","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"quat_to_axis_angle\naxis_angle_to_quat\nquat_conjugate\nskew\nL_mult\nR_mult\nattitude_jacobian\nquat_to_rot","category":"page"},{"location":"#PinnZoo.quat_to_axis_angle","page":"PinnZoo.jl Documentation","title":"PinnZoo.quat_to_axis_angle","text":"quat_to_axis_angle(q; tol = 1e-12)\n\nReturn the axis angle corresponding to the provided quaternion\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.axis_angle_to_quat","page":"PinnZoo.jl Documentation","title":"PinnZoo.axis_angle_to_quat","text":"axis_angle_to_quat(ω; tol = 1e-12)\n\nReturn the quaternion corresponding to the provided axis angle\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.quat_conjugate","page":"PinnZoo.jl Documentation","title":"PinnZoo.quat_conjugate","text":"quat_conjugate(q)\n\nReturn the conjugate of the given quaternion (negates the velocity part)\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.skew","page":"PinnZoo.jl Documentation","title":"PinnZoo.skew","text":"skew(v)\n\nReturn a matrix M such that v times x = Mx where times denotes the cross product\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.L_mult","page":"PinnZoo.jl Documentation","title":"PinnZoo.L_mult","text":"L_mult(q)\n\nReturn a matrix representation of left quaternion multiplication, i.e. q1 cdot q2 = L(q1)q2 where cdot is quaternion multiplication.\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.R_mult","page":"PinnZoo.jl Documentation","title":"PinnZoo.R_mult","text":"R_mult(q)\n\nReturn a matrix representation of right quaternion multiplication, i.e. q1 cdot q2 = R(q2)q1 where cdot is quaternion multiplication.\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.attitude_jacobian","page":"PinnZoo.jl Documentation","title":"PinnZoo.attitude_jacobian","text":"attitude_jacobian(q)\n\nReturn the attitude jacobian G define as dotq = 05Gomega, mapping angular velocity into quaternion time derivative.\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.quat_to_rot","page":"PinnZoo.jl Documentation","title":"PinnZoo.quat_to_rot","text":"quat_to_rot(q)\n\nReturn a rotation matrix R that q represents, defined by hatp^+ = qhatpq^dagger where hatp turns p into a quaternion with zero scalar part and p as the vector part, and ^dagger is the quaternion conjugate.\n\n\n\n\n\n","category":"function"},{"location":"#Quadruped-functions","page":"PinnZoo.jl Documentation","title":"Quadruped functions","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"TODO: Generalize state error and related functions to all models","category":"page"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"state_error\napply_Δx\nerror_jacobian\nerror_jacobian_T\nB_func\nfix_joint_limits\nnearest_ik","category":"page"},{"location":"#PinnZoo.state_error","page":"PinnZoo.jl Documentation","title":"PinnZoo.state_error","text":"state_error(quad::Quadruped, x, x0)\n\nReturn the state_error between x and x0, using axis-angles for quaternion error, and representing body position error in the body frame (matches with body velocity convention).\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.apply_Δx","page":"PinnZoo.jl Documentation","title":"PinnZoo.apply_Δx","text":"apply_Δx(quad::Quadruped, x_k, Δx)\n\nReturn Δx added to x while respecting the configuration space/tangent space relationship (i.e. do quaternion multiplication, rotate Δbody pos from body frame to world frame)\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.error_jacobian","page":"PinnZoo.jl Documentation","title":"PinnZoo.error_jacobian","text":"error_jacobian(quad::Quadruped, x)\n\nReturn the jacobian mapping Δx to x where Δx is in the tangent space (look at state_error for our choice of tangent space).\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.error_jacobian_T","page":"PinnZoo.jl Documentation","title":"PinnZoo.error_jacobian_T","text":"error_jacobian_T(quad::Quadruped, x)\n\nReturn the jacobian mapping x to Δx where Δx is in the tangent space (look at state_error for our choice of tangent space).\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.B_func","page":"PinnZoo.jl Documentation","title":"PinnZoo.B_func","text":"B_func(quad::Quadruped)\n\nReturn the input jacobian mapping motor torques into joint torques\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.fix_joint_limits","page":"PinnZoo.jl Documentation","title":"PinnZoo.fix_joint_limits","text":"fix_joint_limits(model::Quadruped, x; supress_error = false)\n\nReturn x with joint angles wrapped to 2pi to fit within joint limits if possible. If not and supress_error is false, this will error. Otherwise, this will return a clamped version.\n\n\n\n\n\n","category":"function"},{"location":"#PinnZoo.nearest_ik","page":"PinnZoo.jl Documentation","title":"PinnZoo.nearest_ik","text":"nearest_ik(model::Quadruped, q, foot_locs; obey_limits = true)\n\nReturn the ik solution for the given foot_locs and body orientation in q that is closest to the current joint angles in q (defined by minimum norm per joint).\n\n\n\n\n\n","category":"function"},{"location":"#Models","page":"PinnZoo.jl Documentation","title":"Models","text":"","category":"section"},{"location":"#Cartpole","page":"PinnZoo.jl Documentation","title":"Cartpole","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"Cartpole","category":"page"},{"location":"#PinnZoo.Cartpole","page":"PinnZoo.jl Documentation","title":"PinnZoo.Cartpole","text":"Cartpole() <: PinnZooModel\n\nReturn a Cartpole dynamics model\n\n\n\n\n\n","category":"type"},{"location":"#Unitree-Go1","page":"PinnZoo.jl Documentation","title":"Unitree Go1","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"Go1\ninit_state(model::Go1)\ninverse_kinematics(model::Go1, x, foot_locs)","category":"page"},{"location":"#PinnZoo.Go1","page":"PinnZoo.jl Documentation","title":"PinnZoo.Go1","text":"Go1(; μ = 0.3) <: Quadruped\n\nReturn the Unitree Go1 dynamics and kinematics model\n\n\n\n\n\n","category":"type"},{"location":"#PinnZoo.init_state-Tuple{Go1}","page":"PinnZoo.jl Documentation","title":"PinnZoo.init_state","text":"init_state(model::Go1)\n\nReturn state vector with the robot on the ground in the starting pose\n\n\n\n\n\n","category":"method"},{"location":"#PinnZoo.inverse_kinematics-Tuple{Go1, Any, Any}","page":"PinnZoo.jl Documentation","title":"PinnZoo.inverse_kinematics","text":"inverse_kinematics(model::Go1, x, foot_locs)\n\nReturn 12 by 2 matrix containing the 2 possible joint angle solutions that put the feet at foot_locs given the body pose in x. Will be populated with NaN or Inf if solutions don't exist.\n\n\n\n\n\n","category":"method"},{"location":"#Unitree-Go2","page":"PinnZoo.jl Documentation","title":"Unitree Go2","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"Go2\ninit_state(model::Go2)\ninverse_kinematics(model::Go2, x, foot_locs)","category":"page"},{"location":"#PinnZoo.Go2","page":"PinnZoo.jl Documentation","title":"PinnZoo.Go2","text":"Go2(; μ = 0.3) <: Quadruped\n\nReturn the Unitree Go2 dynamics and kinematics model\n\n\n\n\n\n","category":"type"},{"location":"#PinnZoo.init_state-Tuple{Go2}","page":"PinnZoo.jl Documentation","title":"PinnZoo.init_state","text":"init_state(model::Go2)\n\nReturn state vector with the robot on the ground in the starting pose\n\n\n\n\n\n","category":"method"},{"location":"#PinnZoo.inverse_kinematics-Tuple{Go2, Any, Any}","page":"PinnZoo.jl Documentation","title":"PinnZoo.inverse_kinematics","text":"inverse_kinematics(model::Go2, x, foot_locs)\n\nReturn 12 by 2 matrix containing the 2 possible joint angle solutions that put the feet at foot_locs given the body pose in x. Will be populated with NaN or Inf if solutions don't exist.\n\n\n\n\n\n","category":"method"},{"location":"#IHMC-Nadia","page":"PinnZoo.jl Documentation","title":"IHMC Nadia","text":"","category":"section"},{"location":"","page":"PinnZoo.jl Documentation","title":"PinnZoo.jl Documentation","text":"Nadia","category":"page"},{"location":"#PinnZoo.Nadia","page":"PinnZoo.jl Documentation","title":"PinnZoo.Nadia","text":"Nadia(; simple = true, nc_per_foot = 1, μ = 1.0)\n\nReturn a Nadia dynamics and kinematics model. Currently supports 1 or 4 contact points per foot, and only the simple knee (does not support simple = false)\n\n\n\n\n\n","category":"type"}]
}
